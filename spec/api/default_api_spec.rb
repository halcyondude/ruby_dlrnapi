=begin
#DLRN API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for RubyDlrnapi::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = RubyDlrnapi::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(RubyDlrnapi::DefaultApi)
    end
  end

  # unit tests for api_civotes_detail_html_get
  # 
  # Get a detailed overview of the CI reports for a specific repo, with optional filtering. 
  # @param commit_hash Filter on this commit hash.
  # @param distro_hash Filter on this distro hash.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :success If set filter for successful/failed CI votes
  # @return [nil]
  describe 'api_civotes_detail_html_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_civotes_html_get
  # 
  # Get an overview of the CI reports. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'api_civotes_html_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_last_tested_repo_get
  # 
  # Get the last tested repo since a specific time.  If a &#x60;&#x60;job_id&#x60;&#x60; is specified, the order of precedence for the repo returned is: - The last tested repo within that timeframe for that CI job. - The last tested repo within that timeframe for any CI job, so we can have   several CIs converge on a single repo. - The last \&quot;consistent\&quot; repo, if no repo has been tested in the timeframe.  If &#x60;&#x60;sequential_mode&#x60;&#x60; is set to true, a different algorithm is used. Another parameter &#x60;&#x60;previous_job_id&#x60;&#x60; needs to be specified, and the order of precedence for the repo returned is:  - The last tested repo within that timeframe for the CI job described by &#x60;&#x60;previous_job_id&#x60;&#x60;. - If no repo for &#x60;&#x60;previous_job_id&#x60;&#x60; is found, an error will be returned  The sequential mode is meant to be used by CI pipelines, where a CI (n) job needs to use the same repo tested by CI (n-1). 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Repo]
  describe 'api_last_tested_repo_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_last_tested_repo_post
  # 
  # Get the last tested repo since a specific time (optionally for a CI job), and add an \&quot;in progress\&quot; entry in the CI job table for this.  If a job_id is specified, the order of precedence for the repo returned is:  - The last tested repo within that timeframe for that CI job. - The last tested repo within that timeframe for any CI job, so we can have   several CIs converge on a single repo. - The last \&quot;consistent\&quot; repo, if no repo has been tested in the timeframe.  If &#x60;&#x60;sequential_mode&#x60;&#x60; is set to true, a different algorithm is used. Another parameter &#x60;&#x60;previous_job_id&#x60;&#x60; needs to be specified, and the order of precedence for the repo returned is:  - The last tested repo within that timeframe for the CI job described by   &#x60;&#x60;previous_job_id&#x60;&#x60;. - If no repo for &#x60;&#x60;previous_job_id&#x60;&#x60; is found, an error will be returned  The sequential mode is meant to be used by CI pipelines, where a CI (n) job needs to use the same repo tested by CI (n-1). 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Repo]
  describe 'api_last_tested_repo_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_promote_post
  # 
  # Promote a repository. This can be implemented as a local symlink creation in the DLRN worker, or any other form in the future.  Note the API will refuse to promote using promote_name&#x3D;\&quot;consistent\&quot; or \&quot;current\&quot;, since those are reserved keywords for DLRN. 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Promotion]
  describe 'api_promote_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_promotions_get
  # 
  # Get all the promotions, optionally for a specific repository or promotion name. The output will be sorted by the promotion timestamp, with the newest first, and limited to 100 results per query. 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Array<Promotion>]
  describe 'api_promotions_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_remote_import_post
  # 
  # Import a commit built by another instance. This API call mimics the behavior of the &#x60;&#x60;dlrn-remote&#x60;&#x60; command, with the only exception of not being able to specify a custom rdoinfo location. 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Import]
  describe 'api_remote_import_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_repo_status_get
  # 
  # Get all the CI reports for a specific repository. 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [Array<CIVote>]
  describe 'api_repo_status_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_report_html_get
  # 
  # Get a detailed report of the commit build status, with optional filtering. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :package Filter on this package name.
  # @option opts [BOOLEAN] :success Filter on this successful/unsuccessful builds.
  # @return [nil]
  describe 'api_report_html_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for api_report_result_post
  # 
  # Report the result of a CI job. 
  # @param params The JSON params to post
  # @param [Hash] opts the optional parameters
  # @return [CIVote]
  describe 'api_report_result_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
